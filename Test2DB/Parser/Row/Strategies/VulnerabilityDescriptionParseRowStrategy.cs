using ConsoleApp1.Constants.LevelType;
using Test2DB.Models.Row;
using Test2DB.Models.Table;
using HtmlAgilityPack;


namespace ConsoleApp1.Parser;

public class VulnerabilityDescriptionParseRowStrategy: ParseRowStrategy
{
    private const int _descriptionContentTypeState = 1;
    
    private const int _correctionContentTypeState = 2;
    
    private const int _linkContentTypeState = 3;
    
    private bool _getContent = false;
    
    private bool _startGetEntity = false;
    
    private int _contentTypeState = 0;

    private string _lastLinkName = "";
    
    private VulnerabilityDescriptionRowModel _row = new();
    
    public override RowModel GetParseRow(List<HtmlNode> tdList)
    {
        string rowName = tdList[1].InnerText.Trim();
        List<HtmlNode> tdStrList = tdList.Slice(2, tdList.Count - 2);
        string rowText = GetPreparedString(tdStrList);
        
        if (rowText.Length == 0 && rowName.Length == 0)
        {
            return new EmptyRowModel();
        }
        
        int levelTypeId = 0;
        
        if (rowName == "Уязвимость" && _startGetEntity)
        {
            VulnerabilityDescriptionRowModel newRow = _row;
            _row = new VulnerabilityDescriptionRowModel();
            rowText = rowText.Replace(" ", "");
            try
            {
                levelTypeId = LevelTypeConstants.LevelTypeIdByTableName[rowText];

            }
            catch
            {
                Console.WriteLine("sdf");
            }

            _row.LevelTypeId = levelTypeId;
            _contentTypeState = 0;
            
            return newRow;
        }

        if (rowName == "Уязвимость")
        {
            levelTypeId = LevelTypeConstants.LevelTypeIdByTableName[rowText];
            _row.LevelTypeId = levelTypeId;

            _startGetEntity = true;
            
            return new EmptyRowModel();
        }
        
        if (rowName.Length == 0 && rowText.Length != 0 && _contentTypeState == 0)
        {
            _row.Name = rowText;
            
            return new EmptyRowModel();
        }

        if (int.TryParse(rowName, out _))
        {
            _row.ALTXId = int.Parse(rowName);

            return new EmptyRowModel();
        }

        if (rowName == "Описание")
        {
            _contentTypeState = _descriptionContentTypeState;

            return new EmptyRowModel();
        }

        if (rowName == "Исправление")
        {
            _contentTypeState = _correctionContentTypeState;

            return new EmptyRowModel();
        }

        if (rowName == "Ссылки")
        {
            _contentTypeState = _linkContentTypeState;

            return new EmptyRowModel();
        }
        
        switch (_contentTypeState)
        {
            case _descriptionContentTypeState:
                _row.Description = GetPreparedString(rowName);
                break;
            case _correctionContentTypeState:
                _row.Correction = GetPreparedString(rowName);
                break;
           
        }
        
        return new EmptyRowModel();
    }

    public override BaseTableModel GetTable()
    {
        return new VulnerabilityDescriptionBaseTableModel();
    }
}