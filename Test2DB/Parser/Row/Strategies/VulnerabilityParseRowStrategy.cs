using ConsoleApp1.Constants.LevelType;
using Test2DB.Models.LevelType;
using Test2DB.Models.Row;
using Test2DB.Models.Table;
using HtmlAgilityPack;

namespace ConsoleApp1.Parser;

public class VulnerabilityParseRowStrategy: ParseRowStrategy
{
    private readonly List<string> _blackListRowNames = new()
    {
        "Хост&nbsp;/&nbsp;Риск",
        "Всего",
        "Уязвимости",
        "Хост",
    };

    private bool _getEntities = false;

    private bool _startGetEntity = false;

    private string _lastRowEntityName = "";
    
    private VulnerabilityRowModel _row = new();
    
    public override RowModel GetParseRow(List<HtmlNode> tdList)
    {
        string rowName = tdList[1].InnerText.Trim();
        List<HtmlNode> tdStrList = tdList.Slice(2, tdList.Count - 2);
        string rowText = GetPreparedString(tdStrList);
        
        if (rowText.Length == 0)
        {
            return new EmptyRowModel();
        }
        
        if (rowName.Contains("&nbsp;"))
        {
            rowName = rowName.Split("&nbsp;")[0];
        }
        
        if (_blackListRowNames.Contains(rowName))
        {
            return new EmptyRowModel();
        }

        int levelTypeId = 0;
        
        try
        {
            string tableTypeName = GetPreparedString([tdStrList[1]]);

            if (LevelTypeConstants.LevelTypeIdByName.ContainsKey(tableTypeName) && _startGetEntity)
            {
                VulnerabilityRowModel newRow = _row;
                _row = new VulnerabilityRowModel();

                levelTypeId = LevelTypeConstants.LevelTypeIdByName[GetPreparedString([tdStrList[1]])];
            
                _row.Host = rowName;
                _row.ALTXId = Convert.ToInt32(GetPreparedString([tdStrList[0]]));
                _row.LevelTypeId = levelTypeId;
                _row.Name = GetPreparedString([tdStrList[2]]);
            
                _startGetEntity = false;
                
                return newRow;
            }
            
            levelTypeId = LevelTypeConstants.LevelTypeIdByName[GetPreparedString([tdStrList[1]])];
            
            _row.Host = rowName;
            _row.ALTXId = Convert.ToInt32(GetPreparedString([tdStrList[0]]));
            _row.LevelTypeId = levelTypeId;
            _row.Name = GetPreparedString([tdStrList[2]]);
            
            _startGetEntity = true;
        }
        catch
        {
            if (_lastRowEntityName.Length == 0)
            {
                _lastRowEntityName = rowName;
            }
            
            if (_lastRowEntityName.Length == 0)
            {
                return new EmptyRowModel();
            }
            
            if (!_row.Entities.ContainsKey(_lastRowEntityName))
            {
                _row.Entities.Add(_lastRowEntityName, []);
            }
            
            _row.Entities[_lastRowEntityName].Add(rowText);
        }
        
        return new EmptyRowModel();
    }

    public override BaseTableModel GetTable()
    {
        return new VulnerabilityBaseTableModel();
    }
}